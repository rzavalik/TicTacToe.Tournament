name: Build and Unit Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  checks: write
  pull-requests: write
  contents: read

jobs:
  build-and-test:
    name: Build, Test, and Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore TicTacToe.Tournament.sln

      - name: Build solution
        run: dotnet build TicTacToe.Tournament.sln --no-restore --configuration Release

      - name: Run Unit Tests and Collect Coverage
        run: |
          mkdir -p TestResults
          mkdir -p TestResults/Coverage

          for proj in $(find . -type f -iname "*.Tests.csproj"); do
            name=$(basename "$proj" .csproj)

            # Run tests and collect coverage
            dotnet test "$proj" --configuration Release \
              --logger "trx;LogFileName=${name}.trx" \
              --collect:"XPlat Code Coverage"

            # Copy TRX
            find . -name "${name}.trx" -exec cp {} TestResults/ \;

            # Copy coverage file
            find . -name "coverage.cobertura.xml" -exec cp {} TestResults/Coverage/${name}.xml \;
          done

      - name: Upload TRX Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Upload Coverage XML Files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: TestResults/Coverage/*.xml

      - name: Generate HTML Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: TestResults/Coverage/*.xml
          targetdir: TestResults/CoverageReport
          reporttypes: HtmlInline_AzurePipelines;Cobertura

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: TestResults/CoverageReport

      - name: Publish Test Report as PR Comment
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request'
        with:
          name: Tests Report
          path: TestResults/*.trx
          reporter: dotnet-trx

      - name: Publish Test Results to GitHub Actions UI
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: TestResults/*.trx
          
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name tictactoeacr

      - name: Set version
        id: version
        run: echo "VERSION=1.0.${{ github.run_number }}.${{ github.sha }}" >> $GITHUB_ENV

      - name: Build and Push Server image
        run: |
          cd src
          docker build -t tictactoeacr.azurecr.io/tictactoe-server:$VERSION -f src/TicTacToe.Tournament.Server.App/Dockerfile .
          docker push tictactoeacr.azurecr.io/tictactoe-server:$VERSION

      - name: Build and Push WebUI image
        run: |
          cd src
          docker build -t tictactoeacr.azurecr.io/tictactoe-webui:$VERSION -f src/TicTacToe.Tournament.WebApp/Dockerfile .
          docker push tictactoeacr.azurecr.io/tictactoe-webui:$VERSION

      - name: Persist image version to terraform.tfvars
        run: |
          echo "server_image=\"tictactoeacr.azurecr.io/tictactoe-server:$VERSION\"" > infra/terraform/terraform.tfvars
          echo "webui_image=\"tictactoeacr.azurecr.io/tictactoe-webui:$VERSION\"" >> infra/terraform/terraform.tfvars

      - name: Upload terraform.tfvars
        uses: actions/upload-artifact@v4
        with:
          name: terraform-vars
          path: infra/terraform/terraform.tfvars

      - name: Terraform Init & Apply
        working-directory: infra/terraform
        run: |
          terraform init
          terraform apply -auto-approve -var-file=terraform.tfvars
name: Build and Unit Test

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'infra/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'infra/**'
      - '.github/workflows/**'

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:

  build:
    name: Building
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      revision_suffix: ${{ steps.version.outputs.revision_suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      - name: Read and generate version
        id: version
        run: |
          RAW_VERSION=$(xmlstarlet sel -t -v "//Project/PropertyGroup/Version" Directory.Build.props)
          BASE_VERSION=$(echo "$RAW_VERSION" | cut -d. -f1-2)
          COMMIT_HASH="${GITHUB_SHA::8}"
          RUN_NUMBER="${GITHUB_RUN_NUMBER}"
          
          CLEAN_VERSION="${BASE_VERSION}.${RUN_NUMBER}.0"
          VERSION="${BASE_VERSION}.${RUN_NUMBER}.${COMMIT_HASH}"
          REV_SUFFIX="build-${RUN_NUMBER}-${COMMIT_HASH}"
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "CLEAN_VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
          echo "REVISION_SUFFIX=$REV_SUFFIX" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "revision_suffix=$REV_SUFFIX" >> $GITHUB_OUTPUT

      - name: Update Directory.Build.props with new version
        run: |
          xmlstarlet ed -L \
            -u "//Version" -v "$CLEAN_VERSION" \
            -u "//AssemblyVersion" -v "$CLEAN_VERSION" \
            -u "//FileVersion" -v "$CLEAN_VERSION" \
            -u "//InformationalVersion" -v "$VERSION" \
            Directory.Build.props
      
      - name: Restore dependencies
        run: dotnet restore TicTacToe.Tournament.sln

      - name: Build solution
        run: dotnet build TicTacToe.Tournament.sln --no-restore --configuration Release

      - name: Commit updated Directory.Build.props
        env:
          TOKEN: ${{ github.token }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
          git pull origin ${{ github.ref_name }}
          git add Directory.Build.props
          git commit -m "chore: update version to $VERSION [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}



  test:
    name: Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Unit Tests and Collect Coverage
        run: |
          mkdir -p TestResults
          mkdir -p TestResults/Coverage

          for proj in $(find . -type f -iname "*.Tests.csproj"); do
            name=$(basename "$proj" .csproj)

            # Run tests and collect coverage
            dotnet test "$proj" --configuration Release \
              --logger "trx;LogFileName=${name}.trx" \
              --collect:"XPlat Code Coverage"

            # Copy TRX
            find . -name "${name}.trx" -exec cp {} TestResults/ \;

            # Copy coverage file
            find . -name "coverage.cobertura.xml" -exec cp {} TestResults/Coverage/${name}.xml \;
          done

      - name: Upload TRX Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Upload Coverage XML Files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: TestResults/Coverage/*.xml

      - name: Generate HTML Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: TestResults/Coverage/*.xml
          targetdir: TestResults/CoverageReport
          reporttypes: HtmlInline_AzurePipelines;Cobertura

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: TestResults/CoverageReport

      - name: Publish Test Report as PR Comment
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request'
        with:
          name: Tests Report
          path: TestResults/*.trx
          reporter: dotnet-trx

      - name: Publish Test Results to GitHub Actions UI
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: TestResults/*.trx

  pack:
    name: Packing
    needs: [build, test]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name tictactoeacr

      - name: Build and Push Server image
        run: |
          docker build -t tictactoeacr.azurecr.io/tictactoe-server:$VERSION -f src/TicTacToe.Tournament.Server.App/Dockerfile .
          docker tag tictactoeacr.azurecr.io/tictactoe-server:$VERSION tictactoeacr.azurecr.io/tictactoe-server:latest
          docker push tictactoeacr.azurecr.io/tictactoe-server:$VERSION
          docker push tictactoeacr.azurecr.io/tictactoe-server:latest

      - name: Build and Push WebUI image
        run: |
          docker build -t tictactoeacr.azurecr.io/tictactoe-webui:$VERSION -f src/TicTacToe.Tournament.WebApp/Dockerfile .
          docker tag tictactoeacr.azurecr.io/tictactoe-webui:$VERSION tictactoeacr.azurecr.io/tictactoe-webui:latest
          docker push tictactoeacr.azurecr.io/tictactoe-webui:$VERSION
          docker push tictactoeacr.azurecr.io/tictactoe-webui:latest

  deploy:
    name: Deploying
    needs: [build, pack]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      VERSION: ${{ needs.build.outputs.version }}
      REVISION_SUFFIX: ${{ needs.build.outputs.revision_suffix }}
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
    outputs:
      webui_url: ${{ steps.tfoutput.outputs.WEBUI_URL }}
      webui_hub_url: ${{ steps.tfoutput.outputs.WEBUI_HUB_URL }}
      SIGNALR_URL: ${{ steps.tfoutput.outputs.SIGNALR_URL }}
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Persist image version to terraform.tfvars
        run: |
          echo "server_image=\"tictactoeacr.azurecr.io/tictactoe-server:$VERSION\"" > infra/terraform/terraform.tfvars
          echo "webui_image=\"tictactoeacr.azurecr.io/tictactoe-webui:$VERSION\"" >> infra/terraform/terraform.tfvars

      - name: Upload terraform.tfvars
        uses: actions/upload-artifact@v4
        with:
          name: terraform-vars
          path: infra/terraform/terraform.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate

      - name: Terraform Apply
        working-directory: infra/terraform
        run: terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Capture Terraform Outputs
        id: tfoutput
        working-directory: infra/terraform
        run: |
          echo "SERVER_URL=$(terraform output -raw server_url)" >> $GITHUB_OUTPUT
          echo "WEBUI_URL=$(terraform output -raw webui_url)" >> $GITHUB_OUTPUT
          echo "WEBUI_HUB_URL=$(terraform output -raw webui_hub_url)" >> $GITHUB_OUTPUT
          echo "SIGNALR_URL=$(terraform output -raw signalr_endpoint)" >> $GITHUB_OUTPUT

      - name: Force reload server
        run: |
          az containerapp update \
            --name tictactoe-server \
            --resource-group TicTacToe \
            --image tictactoeacr.azurecr.io/tictactoe-server:$VERSION \
            --revision-suffix $REVISION_SUFFIX
      
      - name: Force reload webui
        run: |
          az containerapp update \
             --name tictactoe-webui \
             --resource-group TicTacToe \
             --image tictactoeacr.azurecr.io/tictactoe-webui:$VERSION \
             --revision-suffix $REVISION_SUFFIX

      - name: Tag deployed version
        if: env.VERSION != ''
        env:
          TOKEN: ${{ github.token }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
          git fetch origin
          git tag "$VERSION"
          git push origin "$VERSION"

  clean:
    name: Cleaning
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: write
    continue-on-error: true
    env:
      VERSION: ${{ needs.build.outputs.version }}
      REVISION_SUFFIX: ${{ needs.build.outputs.revision_suffix }}
      ARM_CLIENT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Clean up old ACR images (keep 3 + latest)
        run: |
          REPO_LIST=$(az acr repository list --name tictactoeacr --output tsv)
          
          for repo in $REPO_LIST; do
            echo "Processing repo: $repo"
      
            TAGS=$(az acr repository show-tags \
              --name tictactoeacr \
              --repository $repo \
              --orderby time_desc \
              --output tsv)
      
            COUNT=0
            for tag in $TAGS; do
              if [[ "$tag" == "latest" ]]; then
                echo "Skipping tag: latest"
                continue
              fi
      
              COUNT=$((COUNT + 1))
              if [ $COUNT -le 3 ]; then
                echo "Keeping tag: $tag"
                continue
              fi
      
              echo "Deleting $repo:$tag"
              az acr repository delete \
                --name tictactoeacr \
                --image "$repo:$tag" \
                --yes || true
            done
          done

  release:
    name: Release Clients
    needs: [build, test, deploy]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build.outputs.version }}
      SIGNALR_URL: ${{ needs.deploy.outputs.SIGNALR_URL }}
      WEBAPP_URL: ${{ needs.deploy.outputs.WEBUI_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Replace appSettings.json with URLs
        run: |
          for proj in DumbPlayer SmartPlayer OpenAIClientPlayer; do 
            jq --arg web "$WEBAPP_URL" --arg signalr "$SIGNALR_URL" \
                '.Server.WebEndpoint = $web | .Server.SignalREndpoint = $signalr' \
                src/TicTacToe.Tournament.$proj/appSettings.json > src/TicTacToe.Tournament.$proj/tmp.json
            mv src/TicTacToe.Tournament.$proj/tmp.json src/TicTacToe.Tournament.$proj/appSettings.json
          done

      - name: Publish bots for Windows and Linux
        run: |
          mkdir -p artifacts
          for proj in DumbPlayer SmartPlayer OpenAIClientPlayer; do
            dotnet publish src/TicTacToe.Tournament.$proj/TicTacToe.Tournament.$proj.csproj \
              -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true \
              -o artifacts/${proj}_win-x64
            dotnet publish src/TicTacToe.Tournament.$proj/TicTacToe.Tournament.$proj.csproj \
              -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true \
              -o artifacts/${proj}_linux-x64
          done

      - name: Publish and package bots for Windows and Linux
        run: |
          mkdir -p artifacts
          for proj in DumbPlayer SmartPlayer OpenAIClientPlayer; do
            win_dir="artifacts/${proj}_win-x64"
            linux_dir="artifacts/${proj}_linux-x64"

            dotnet publish src/TicTacToe.Tournament.$proj/TicTacToe.Tournament.$proj.csproj \
              -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true \
              -o $win_dir
            dotnet publish src/TicTacToe.Tournament.$proj/TicTacToe.Tournament.$proj.csproj \
              -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true \
              -o $linux_dir

            zip -j artifacts/${proj}_win-x64.zip $win_dir/*
            zip -j artifacts/${proj}_linux-x64.zip $linux_dir/*
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Bot Clients ${{ needs.build.outputs.version }}
          tag_name: ${{ needs.build.outputs.version }}
          files: artifacts/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Build and Unit Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  checks: write
  pull-requests: write
  contents: read

jobs:

  build:
    name: Building
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      revision_suffix: ${{ steps.version.outputs.revision_suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      - name: Read and generate version
        id: version
        run: |
          RAW_VERSION=$(xmlstarlet sel -t -v "//Project/PropertyGroup/Version" Directory.Build.props)
          BASE_VERSION=$(echo "$RAW_VERSION" | cut -d. -f1-2) # só major.minor
          COMMIT_HASH="${GITHUB_SHA::8}"
          RUN_NUMBER="${GITHUB_RUN_NUMBER}"
          
          CLEAN_VERSION="${BASE_VERSION}.${RUN_NUMBER}.${COMMIT_HASH}"
          REV_SUFFIX="build-${RUN_NUMBER}-${COMMIT_HASH}"
          
          echo "VERSION=$CLEAN_VERSION" >> $GITHUB_ENV
          echo "REVISION_SUFFIX=$REV_SUFFIX" >> $GITHUB_ENV
          echo "version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "revision_suffix=$REV_SUFFIX" >> $GITHUB_OUTPUT

      - name: Update Directory.Build.props with new version
        run: |
          xmlstarlet ed -L \
            -u "//Version" -v "$CLEAN_VERSION" \
            -u "//AssemblyVersion" -v "$CLEAN_VERSION" \
            -u "//FileVersion" -v "$CLEAN_VERSION" \
            -u "//InformationalVersion" -v "$VERSION" \
            Directory.Build.props
      
      - name: Restore dependencies
        run: dotnet restore TicTacToe.Tournament.sln

      - name: Build solution
        run: dotnet build TicTacToe.Tournament.sln --no-restore --configuration Release

      - name: Commit updated Directory.Build.props
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          REPO_URL="https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}"
          git remote set-url origin "$REPO_URL"
          git pull "$REPO_URL" main
          git add Directory.Build.props
          git commit -m "chore: update version to $VERSION [skip ci]" || echo "No changes to commit"
          git push origin HEAD:main

  test:
    name: Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Unit Tests and Collect Coverage
        run: |
          mkdir -p TestResults
          mkdir -p TestResults/Coverage

          for proj in $(find . -type f -iname "*.Tests.csproj"); do
            name=$(basename "$proj" .csproj)

            # Run tests and collect coverage
            dotnet test "$proj" --configuration Release \
              --logger "trx;LogFileName=${name}.trx" \
              --collect:"XPlat Code Coverage"

            # Copy TRX
            find . -name "${name}.trx" -exec cp {} TestResults/ \;

            # Copy coverage file
            find . -name "coverage.cobertura.xml" -exec cp {} TestResults/Coverage/${name}.xml \;
          done

      - name: Upload TRX Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/*.trx

      - name: Upload Coverage XML Files
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: TestResults/Coverage/*.xml

      - name: Generate HTML Coverage Report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.26
        with:
          reports: TestResults/Coverage/*.xml
          targetdir: TestResults/CoverageReport
          reporttypes: HtmlInline_AzurePipelines;Cobertura

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: TestResults/CoverageReport

      - name: Publish Test Report as PR Comment
        uses: dorny/test-reporter@v1
        if: github.event_name == 'pull_request'
        with:
          name: Tests Report
          path: TestResults/*.trx
          reporter: dotnet-trx

      - name: Publish Test Results to GitHub Actions UI
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: TestResults/*.trx

  pack:
    name: Packing
    needs: test
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: az acr login --name tictactoeacr

      - name: Build and Push Server image
        run: |
          docker build -t tictactoeacr.azurecr.io/tictactoe-server:$VERSION -f src/TicTacToe.Tournament.Server.App/Dockerfile .
          docker push tictactoeacr.azurecr.io/tictactoe-server:$VERSION

      - name: Build and Push WebUI image
        run: |
          docker build -t tictactoeacr.azurecr.io/tictactoe-webui:$VERSION -f src/TicTacToe.Tournament.WebApp/Dockerfile .
          docker push tictactoeacr.azurecr.io/tictactoe-webui:$VERSION

  deploy:
    name: Deploying
    needs: [build, pack]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build.outputs.version }}
      REVISION_SUFFIX: ${{ needs.build.outputs.revision_suffix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Persist image version to terraform.tfvars
        run: |
          echo "server_image=\"tictactoeacr.azurecr.io/tictactoe-server:$VERSION\"" > infra/terraform/terraform.tfvars
          echo "webui_image=\"tictactoeacr.azurecr.io/tictactoe-webui:$VERSION\"" >> infra/terraform/terraform.tfvars

      - name: Upload terraform.tfvars
        uses: actions/upload-artifact@v4
        with:
          name: terraform-vars
          path: infra/terraform/terraform.tfvars

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: infra/terraform
        run: terraform validate

      - name: Terraform Apply
        working-directory: infra/terraform
        run: terraform apply -auto-approve -var-file=terraform.tfvars

      - name: Force reload server
        run: |
          az containerapp update \
            --name tictactoe-server \
            --resource-group TicTacToe \
            --image tictactoeacr.azurecr.io/tictactoe-server:$VERSION \
            --revision-suffix $REVISION_SUFFIX
      
      - name: Force reload webui
        run: |
          az containerapp update \
             --name tictactoe-webui \
             --resource-group TicTacToe \
             --image tictactoeacr.azurecr.io/tictactoe-webui:$VERSION \
             --revision-suffix $REVISION_SUFFIX

      - name: Configure ACR Retention Policy
        run: |
          az acr config retention update \
            --name tictactoeacr \
            --resource-group TicTacToe \
            --status Enabled \
            --days 7 \
            --type UntaggedManifests \
            --policy-name delete-untagged-after-7-days

      - name: Tag deployed version
        if: env.VERSION != ''
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          REPO_URL="https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}"
          git clone "$REPO_URL" .
          git tag $VERSION
          git push "$REPO_URL" $VERSION
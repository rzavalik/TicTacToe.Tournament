@{
	ViewData["Title"] = "Create Tournament";
}

<h2>Create New Tournament</h2>

<form id="createTournamentForm">
	<div class="mb-3">
		<label for="tournamentName" class="form-label">Tournament Name</label>
		<input type="text" class="form-control" id="tournamentName" placeholder="Enter tournament name..." required>
	</div>
	<div class="mb-3">
		<label for="matchRepetition" class="form-label">
			Match Repetition: <span id="matchRepetitionValue">1</span> times
		</label>
		<input type="range"
			   class="form-range"
			   id="matchRepetition"
			   min="1"
			   max="9"
			   step="1"
			   value="1"
			   required>
	</div>
	<button type="submit" class="btn btn-success">Create Tournament</button>
	<a href="/tournament" class="btn btn-secondary">Cancel</a>
</form>

@section Scripts {
	<script>
				document.addEventListener("DOMContentLoaded", function () {
			const tournamentNameInput = document.getElementById("tournamentName");
			const now = new Date();
			const formatted = now.getFullYear() + "-" +
				String(now.getMonth() + 1).padStart(2, '0') + "-" +
				String(now.getDate()).padStart(2, '0') + " " +
				String(now.getHours()).padStart(2, '0') + ":" +
				String(now.getMinutes()).padStart(2, '0');
			tournamentNameInput.value = `Tournament ${formatted}`;

			const matchRepetitionSlider = document.getElementById("matchRepetition");
			const matchRepetitionValue = document.getElementById("matchRepetitionValue");

			matchRepetitionSlider.addEventListener("input", function () {
				matchRepetitionValue.textContent = matchRepetitionSlider.value;

				const min = parseInt(matchRepetitionSlider.min);
				const max = parseInt(matchRepetitionSlider.max);
				const val = ((matchRepetitionSlider.value - min) * 100) / (max - min);

				matchRepetitionSlider.style.setProperty('--value', `${val}%`);
			});

			document.getElementById("createTournamentForm").addEventListener("submit", async function (e) {
				e.preventDefault();

				const name = tournamentNameInput.value;
				const matchRepetition = parseInt(matchRepetitionSlider.value);

				if (!name || matchRepetition < 1) {
					await Swal.fire({
						icon: 'warning',
						title: 'Invalid input',
						text: 'Please enter a valid tournament name and a repetition number greater than 0.'
					});
					return;
				}

				try {
					const response = await fetch("/tournament/new", {
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify({ name, matchRepetition })
					});

					if (response.ok) {
						const result = await response.json();
						await Swal.fire({
							icon: 'success',
							title: 'Tournament Created!',
							text: 'Your tournament was created successfully.'
						});
						window.location.href = `/tournament/view/${result.id}`;
					} else {
						const error = await response.text();
						await Swal.fire({
							icon: 'error',
							title: 'Creation Failed',
							text: error || 'An error occurred while creating the tournament.'
						});
					}
				} catch (error) {
					console.error(error);
					await Swal.fire({
						icon: 'error',
						title: 'Unexpected Error',
						text: 'Something went wrong. Please try again later.'
					});
				}
			});
		});
	</script>
}